buildscript {
    ext {
        springBootVersion = '1.5.3.RELEASE'
    }
    repositories {
//        mavenLocal()
        mavenCentral()
//        maven{
//            url 'http://10.191.9.13:8080/nexus/content/groups/public/'
//        }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath('se.transmode.gradle:gradle-docker:1.2')
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.4'
}

configure(allprojects) { project ->
    group 'com.tuli'
    version '1.0-SNAPSHOT'

    ext.springCloudVersion          = 'Dalston.RELEASE'
    ext.springBootVersion           = '1.5.3.RELEASE'
    ext.springBootMyBatisVersion    = '1.2.0'
    ext.springBootpagehelperVersion = '1.1.0'
    ext.springBootAdminVersion      = '1.5.0'
    ext.springBootDruidVersion      = '0.0.1-SNAPSHOT'
    ext.springBootRedisVersion      = '0.0.1-SNAPSHOT'
    ext.junitVersion                = "4.12"
    ext.mysqlVersion                = "5.1.32"
    ext.jacksonVersion              = "2.8.7"
    ext.httpclientVersion           = "4.3.5"
    ext.servletapiVersion           = "3.1.0"
    ext.commonslangVersion          = "2.6"
    ext.commonslang3Version         = "3.3.2"
    ext.commonsioVersion            = "1.3.2"
    ext.commonsnetVersion           = "3.3"
    ext.jsqlparserVersion           = "4.12"
    ext.slf4jVersion                = "1.7.2"
    ext.commonsfileuploadVersion    = "1.3.1"
    ext.jedisVersion                = "2.7.2"
    ext.solrjVersion                = "5.4.0"
    ext.freemarkerVersion           = "2.3.23"
    ext.quartzVersion               = "2.2.2"
    ext.fastjsonVersion             = "1.2.28"
    ext.swagger2Version             = "2.6.1"
    ext.lombokVersion               = "1.16.16"
    ext.fastdfsVersion              = "1.24"
    ext.beetl_starterVersion        = "0.0.3"
    ext.hutoolVersion               = "3.0.3"
    ext.swagger2Version             = "2.6.1"
    ext.logbackkafkaVersion         = "0.1.0"
    ext.apolloclientVersion         = "0.8.0"

    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'org.springframework.boot'

    sourceCompatibility = 1.8

    if (!(name.contains('common'))) {
        apply plugin: 'org.springframework.boot'
    }
    apply plugin: 'docker'

    repositories {
//    mavenLocal()
        mavenCentral()
//        maven {
//            url 'http://10.191.9.13:8080/nexus/content/groups/public/'
//        }
    }

    dependencies {
        if (!(name.contains('common'))) {
            testCompile("org.springframework.boot:spring-boot-starter-test")
            testCompile("junit:junit:${junitVersion}")
        }
    }
    dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        }
    }

    if (!((name.contains('common')) || (name.contains('api'))  || (name == 'gcloud'))) {
//        task buildDocker(type: Docker, dependsOn: bootRepackage) {
        task buildDocker(type: Docker, dependsOn: build) {
            push = true
//            registry = dockerRegistry
            applicationName = jar.baseName
            dockerfile = file('Dockerfile')
            doFirst {
                copy {
                    from jar
                    into stageDir
                }
            }
        }
    }

    if (name.contains('api')) {
        tasks.remove(bootRepackage)
    }
}

project("gcloud-eureka-server") {
    description = "gcloud-eureka-server"

    dependencies {
        compile("org.springframework.cloud:spring-cloud-starter-eureka-server")
    }
}
project("gcloud-config") {
    description = "gcloud-config"

    dependencies {
        compile("org.springframework.cloud:spring-cloud-starter-eureka")
        compile("org.springframework.cloud:spring-cloud-config-server")
    }
}
project("gcloud-admin") {
    description = "gcloud-admin"

    dependencies {
        compile("de.codecentric:spring-boot-admin-server:${springBootAdminVersion}")
        compile("de.codecentric:spring-boot-admin-server-ui:${springBootAdminVersion}")
        compile("org.springframework.boot:spring-boot-starter-actuator")
        compile("org.springframework.cloud:spring-cloud-starter-eureka")
    }

}
project("gcloud-sleuth") {
    description = "gcloud-sleuth"

    dependencies {
        compile("org.springframework.cloud:spring-cloud-starter-eureka")
        compile("io.zipkin.java:zipkin-server")
        compile("io.zipkin.java:zipkin-autoconfigure-ui")
    }
}
project("gcloud-zuul") {
    description = "gcloud-zuul"

    dependencies {
        compile("org.springframework.cloud:spring-cloud-starter-eureka")
        compile("org.springframework.cloud:spring-cloud-starter-zuul")
    }
}
project("gcloud-turbine") {
    description = "gcloud-turbine"

    dependencies {
        compile("org.springframework.cloud:spring-cloud-starter-turbine")
        compile("org.springframework.cloud:spring-cloud-starter-hystrix-dashboard")
        compile("org.springframework.boot:spring-boot-starter-actuator")
        compile("org.springframework.cloud:spring-cloud-starter-config")
    }
}
project("gcloud-common") {
    description = "gcloud-common"

    dependencies {
        compileOnly("javax.servlet:javax.servlet-api:${servletapiVersion}")
        compileOnly("redis.clients:jedis:${jedisVersion}")
        compile("org.apache.commons:commons-lang3:${commonslang3Version}")
        compile("commons-lang:commons-lang:${commonslangVersion}")
        compile("com.alibaba:fastjson:${fastjsonVersion}")
//        compile("org.csource:fastdfs:${fastdfsVersion}")
        compile("org.slf4j:slf4j-api:${slf4jVersion}")
        compile("io.springfox:springfox-swagger-ui:${swagger2Version}")
        compile("io.springfox:springfox-swagger2:${swagger2Version}")
    }
}
project("gcloud-service-test-api") {
    description = "gcloud-service-test-api"

    dependencies {
        compile(project(":gcloud-common"))
        compile("org.springframework.cloud:spring-cloud-starter-feign")
    }
}
project("gcloud-service-test") {
    description = "gcloud-service-test"

    dependencies {
        compile(project(":gcloud-service-test-api"))
        compile("org.springframework.cloud:spring-cloud-starter-eureka")
        compile("org.springframework.cloud:spring-cloud-starter-zipkin")
        compile("org.springframework.cloud:spring-cloud-starter-hystrix")
        compile("org.springframework.cloud:spring-cloud-starter-bus-amqp")
        compile("org.springframework.cloud:spring-cloud-starter-security")
        compile("org.springframework.cloud:spring-cloud-starter-oauth2")
//        compile("com.ctrip.framework.apollo:apollo-client:${apolloclientVersion}")
    }
}
project("gcloud-web-test") {
    description = "gcloud-web-test"

    dependencies {
        compile(project(":gcloud-service-test-api"))
        compile("org.springframework.boot:spring-boot-starter-web")
        compile("org.springframework.cloud:spring-cloud-starter-eureka")
//        compile("com.ctrip.framework.apollo:apollo-client:${apolloclientVersion}")
        compile("org.springframework.cloud:spring-cloud-starter-hystrix")
        compile("org.springframework.cloud:spring-cloud-starter-bus-amqp")
        compile("org.springframework.cloud:spring-cloud-starter-zipkin")
        compile("org.springframework.boot:spring-boot-starter-aop")
        compile("org.springframework.boot:spring-boot-starter-actuator")
        compile("org.springframework.retry:spring-retry")
        compile("com.piggsoft:beetl-spring-boot-starter:${beetl_starterVersion}")
        compile("commons-fileupload:commons-fileupload:${commonsfileuploadVersion}")
    }
}
configure(rootProject) {
    description = "gcloud"

//    dependencyManagement {
//        imports {
//            mavenBom "io.projectreactor:reactor-bom"
//        }
//        resolutionStrategy {
//            cacheChangingModulesFor 0, 'seconds'
//        }
//        applyMavenExclusions = false
//    }

    // don't publish the default jar for the root project
    configurations.archives.artifacts.clear()

    dependencies {  // for integration tests
//        testCompile(project(":spring-aop"))

    }

//    task buildDocker(type: Docker, dependsOn: bootRepackage) {
//        push = true
//        applicationName = jar.baseName
//        dockerfile = file('Dockerfile')
//        doFirst {
//            copy {
//                from jar
//                into stageDir
//            }
//        }
//    }

}
